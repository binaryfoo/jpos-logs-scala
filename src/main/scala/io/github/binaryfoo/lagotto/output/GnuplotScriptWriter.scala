package io.github.binaryfoo.lagotto.output

object GnuplotScriptWriter {

  val ToSecondPrecision = """time\(HH:[m0]{2}:[s0]{2}\)""".r
  val ToMinutePrecision = """time\(HH:[m0]{2}\)""".r
  val DateTimeToSomePrecision = """time\(yyyy-MM-dd HH:[m0]{2}:[s0]{2}\)""".r

  def write(fields: Seq[String], csvFileName: String, plotFileName: String, xRange: (String, String)): String = {
    val timeFormat = fields.head match {
      case "time" => "%H:%M:%S"
      case ToSecondPrecision() => "%H:%M:%S"
      case ToMinutePrecision() => "%H:%M"
      case "date" => "%Y-%m-%d"
      case "datetime" => "%Y-%m-%d %H:%M:%S"
      case DateTimeToSomePrecision() => "%Y-%m-%d %H:%M:%S"
    }
    val columns = fields.tail
    val (firstTime, lastTime) = xRange

    // using tab delimited data fails on empty cells: \t\t gets merged
    // line types cheat sheet: http://kunak.phsx.ku.edu/~sergei/Gnuplot/line_point_types.html
    
    s"""#!/usr/bin/env gnuplot
      |set datafile separator ','
      |set terminal svg enhanced mouse standalone size 1280,960
      |set output '$plotFileName.svg'
      |set xdata time
      |set timefmt '$timeFormat'
      |set format x '$timeFormat'
      |set multiplot layout ${columns.size},1 title 'Auto-generated by lago'
      |set lmargin 10
      |set xrange ['$firstTime':'$lastTime']
      |#set xrange [] writeback
      |do for [i=2:${fields.size}] {
      |    plot '$csvFileName' using 1:i w lines lt 3 t column(i)
      |    #set xrange restore
      |}
      |""".stripMargin
  }
}
